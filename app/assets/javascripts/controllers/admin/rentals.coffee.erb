'use strict'

### COMMON CODE ###



class RentalController

  constructor: ($scope, groups, prices, partners, CSRF) ->
    # protection against request forgery
    CSRF.setMetaTags()
    console.log " REntal Controller"


    ## groups list
    $scope.groups = groups.filter (g) -> g.slug != 'admins' && !g.disabled

    ## users with role 'partner', notifiables for a partner plan
    $scope.partners = partners.users

    ## Subscriptions prices, machines prices and training prices, per groups
    $scope.group_pricing = prices

    ##
    # For use with 'ng-class', returns the CSS class name for the uploads previews.
    # The preview may show a placeholder or the content of the file depending on the upload state.
    # @param v {*} any attribute, will be tested for truthiness (see JS evaluation rules)
    ##
    $scope.fileinputClass = (v)->
      if v
        'fileinput-exists'
      else
        'fileinput-new'

    ##
    # Mark the provided file for deletion
    # @param file {Object}
    ##
    $scope.deleteFile = (file) ->
      if file? and file.id?
        file._destroy = true



##
# Controller used in the plan creation form
##
Application.Controllers.controller 'NewRentalController', ['$scope', '$uibModal', 'groups', 'prices', 'partners', 'CSRF', '$state', 'growl', '_t'
, ($scope, $uibModal, groups, prices, partners, CSRF, $state, growl, _t) ->



  ### PRIVATE STATIC CONSTANTS ###

  ## when creating a new contact for a partner plan, this ID will be sent to the server
  NEW_PARTNER_ID: null

  ### PUBLIC SCOPE ###
  console.log "NEW REntal Controller"
  ## current form is used to create a new plan
  $scope.mode = 'creation'

  ## prices bindings
  $scope.prices =
    training: {}
    machine: {}

  console.log "HACIENDO EL RENTAL"
  ## form inputs bindings
  $scope.rental =
    type: null
    group_id: null
    interval: null
    intervalCount: 0
    amount: null
    is_rolling: false
    partnerId: null
    partnerContact: null
    ui_weight: 0

  ## API URL where the form will be posted
  $scope.actionUrl = "/api/rentals/"

  ## HTTP method for the rest API
  $scope.method = 'POST'

  ##
  # Checks if the partner contact is a valid data. Used in the form validation process
  # @returns {boolean}
  ##
  $scope.partnerIsValid = ->
    console.log "HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH"
    ($scope.rental.type == "Rental") or ($scope.rental.partnerId or ($scope.rental.partnerContact and $scope.rental.partnerContact.email))



  ##
  # Open a modal dialog allowing the admin to create a new partner user
  ##
  $scope.openPartnerNewModal = (rental_subscription)->
    modalInstance = $uibModal.open
      animation: true,
      templateUrl: '<%= asset_path "shared/_partner_new_modal.html" %>'
      size: 'lg',
      controller: ['$scope', '$uibModalInstance', 'User', ($scope, $uibModalInstance, User) ->
        $scope.partner = {}

        $scope.ok = ->
          User.save {}, { user: $scope.partner }, (user)->
            $scope.partner.id = user.id
            $scope.partner.name = "#{user.first_name} #{user.last_name}"
            $uibModalInstance.close($scope.partner)
          , (error)->
            growl.error(_t('new_plan.unable_to_save_this_user_check_that_there_isnt_an_already_a_user_with_the_same_name'))
        $scope.cancel = ->
          $uibModalInstance.dismiss('cancel')
      ]
    # once the form was validated succesfully ...
    modalInstance.result.then (partner) ->
      $scope.partners.push(partner)
      $scope.plan.partnerId = partner.id

##
  # Display some messages and redirect the user, once the form was submitted, depending on the result status
  # (failed/succeeded).
  # @param content {Object}
  ##
  $scope.afterSubmit = (content) ->
    console.log "EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE " + content
    if !content.id? and !content.rental_ids?
      growl.error(_t('new_rental.unable_to_create_the_subscription_please_try_again'))
    else
      growl.success(_t('new_rental.successfully_created_subscription(s)_dont_forget_to_redefine_prices'))
      if content.rental_ids?
        $state.go('app.admin.pricing')
      else
        if content.id?
          $state.go('app.admin.rentals.edit', {id: content.id})


  new RentalController($scope, groups, prices, partners, CSRF)
]



##
# Controller used in the plan edition form
##
Application.Controllers.controller 'EditRentalController', ['$scope', 'groups', 'rentals', 'rentalPromise', 'machines', 'spaces', 'prices', 'partners', 'CSRF', '$state', '$stateParams', 'growl', '$filter', '_t', 'Rental'
, ($scope, groups, rentals, rentalPromise, machines, spaces, prices, partners, CSRF, $state, $stateParams, growl, $filter, _t, Rental) ->



  ### PUBLIC SCOPE ###

  ## List of spaces
  $scope.spaces = spaces

  ## List of rentals
  $scope.rentals = rentals

  ## List of machines
  $scope.machines = machines

  ## List of groups
  $scope.groups = groups

  ## current form is used for edition mode
  $scope.mode = 'edition'

  ## edited plan data
  $scope.rental = rentalPromise
  $scope.rental.type = "Rental" if $scope.rental.type == null
  $scope.rental.disabled = 'true' if $scope.rental.disabled

  ## API URL where the form will be posted
  $scope.actionUrl = "/api/rentals/" + $stateParams.id

  ## HTTP method for the rest API
  $scope.method = 'PATCH'



  ##
  # If a parent plan was set ($scope.plan.parent), the prices will be copied from this parent plan into
  # the current plan prices list. Otherwise, the current plan prices will be erased.
  ##
  $scope.copyPricesFromRental = ->
    if $scope.rental.parent
      Rental.get {id: $scope.rental.parent}, (parentRental) ->
        for parentPrice in parentRental.prices
          for childKey, childPrice of $scope.rental.prices
            if childPrice.priceable_type == parentPrice.priceable_type and childPrice.priceable_id == parentPrice.priceable_id
              $scope.rental.prices[childKey].amount = parentPrice.amount
              break

    # if no plan were selected, unset every prices
    else
      for key, price of $scope.rental.prices
        $scope.rental.prices[key].amount = 0



  ##
  # Display some messages once the form was submitted, depending on the result status (failed/succeeded)
  # @param content {Object}
  ##
  $scope.afterSubmit = (content) ->
    if !content.id? and !content.rental_ids?
      growl.error(_t('edit_rental.unable_to_save_subscription_changes_please_try_again'))
    else
      growl.success(_t('edit_rental.subscription_successfully_changed'))
      $state.go('app.admin.pricing')



  ##
  # Generate a string identifying the given plan by literal humain-readable name
  # @param plan {Object} Plan object, as recovered from GET /api/plan/:id
  # @param groups {Array} List of Groups objects, as recovered from GET /api/groups
  # @param short {boolean} If true, the generated name will contains the group slug, otherwise the group full name
  # will be included.
  # @returns {String}
  ##
  $scope.humanReadableRentalName = (rental, groups, short)->
    "#{$filter('humanReadableRentalName')(rental, groups, short)}"



  ##
  # Retrieve the machine from its ID
  # @param machine_id {number} machine identifier
  # @returns {Object} Machine
  ##
  $scope.getMachine = (machine_id) ->
    for machine in $scope.machines
      if machine.id == machine_id
        return machine



  ##
  # Retrieve the space from its ID
  # @param space_id {number} space identifier
  # @returns {Object} Space
  ##
  $scope.getSpace = (space_id) ->
    for space in $scope.spaces
      if space.id == space_id
        return space



  ### PRIVATE SCOPE ###

  ##
  # Kind of constructor: these actions will be realized first when the controller is loaded
  ##
  initialize = ->
    # Using the RentalsController
    new RentalController($scope, groups, prices, partners, CSRF)

  ## !!! MUST BE CALLED AT THE END of the controller
  initialize()
]
